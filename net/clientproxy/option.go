// Code generated by "gogen option"; DO NOT EDIT.
// Exec: "gogen option -n ProxyOption -o option.go"
// Version: 0.0.2

package clientproxy

import (
	time "time"

	discovery "github.com/aggronmagi/walle/net/discovery"
	zaplog "github.com/aggronmagi/walle/zaplog"
)

var _ = walleClientProxy()

type ProxyOptions struct {
	// NewEntry create custom entry for discovery new entry
	NewClient NewClientFunc
	// NewDiscovery create discovery
	NewDiscovery NewDiscoveryFunc
	// DiscoveryOptions custom discovery options
	DiscoveryOptions []discovery.DiscoveryOption
	// BalancerName specify default balancer. empty means use server set value.
	BalanceName string
	// LinkInterval
	LinkInterval time.Duration
	// frame log
	FrameLogger (*zaplog.Logger)
}

// NewEntry create custom entry for discovery new entry
func WithNewClient(v NewClientFunc) ProxyOption {
	return func(cc *ProxyOptions) ProxyOption {
		previous := cc.NewClient
		cc.NewClient = v
		return WithNewClient(previous)
	}
}

// NewDiscovery create discovery
func WithNewDiscovery(v NewDiscoveryFunc) ProxyOption {
	return func(cc *ProxyOptions) ProxyOption {
		previous := cc.NewDiscovery
		cc.NewDiscovery = v
		return WithNewDiscovery(previous)
	}
}

// DiscoveryOptions custom discovery options
func WithDiscoveryOptions(v ...discovery.DiscoveryOption) ProxyOption {
	return func(cc *ProxyOptions) ProxyOption {
		previous := cc.DiscoveryOptions
		cc.DiscoveryOptions = v
		return WithDiscoveryOptions(previous...)
	}
}

// BalancerName specify default balancer. empty means use server set value.
func WithBalanceName(v string) ProxyOption {
	return func(cc *ProxyOptions) ProxyOption {
		previous := cc.BalanceName
		cc.BalanceName = v
		return WithBalanceName(previous)
	}
}

// LinkInterval
func WithLinkInterval(v time.Duration) ProxyOption {
	return func(cc *ProxyOptions) ProxyOption {
		previous := cc.LinkInterval
		cc.LinkInterval = v
		return WithLinkInterval(previous)
	}
}

// frame log
func WithFrameLogger(v *zaplog.Logger) ProxyOption {
	return func(cc *ProxyOptions) ProxyOption {
		previous := cc.FrameLogger
		cc.FrameLogger = v
		return WithFrameLogger(previous)
	}
}

// SetOption modify options
func (cc *ProxyOptions) SetOption(opt ProxyOption) {
	_ = opt(cc)
}

// ApplyOption modify options
func (cc *ProxyOptions) ApplyOption(opts ...ProxyOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

// GetSetOption modify and get last option
func (cc *ProxyOptions) GetSetOption(opt ProxyOption) ProxyOption {
	return opt(cc)
}

// ProxyOption option define
type ProxyOption func(cc *ProxyOptions) ProxyOption

// NewProxyOptions create options instance.
func NewProxyOptions(opts ...ProxyOption) *ProxyOptions {
	cc := newDefaultProxyOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogProxyOptions != nil {
		watchDogProxyOptions(cc)
	}
	return cc
}

// InstallProxyOptionsWatchDog install watch dog
func InstallProxyOptionsWatchDog(dog func(cc *ProxyOptions)) {
	watchDogProxyOptions = dog
}

var watchDogProxyOptions func(cc *ProxyOptions)

// newDefaultProxyOptions new option with default value
func newDefaultProxyOptions() *ProxyOptions {
	cc := &ProxyOptions{
		NewClient:        nil,
		NewDiscovery:     discovery.NewDiscovery,
		DiscoveryOptions: nil,
		BalanceName:      "",
		LinkInterval:     time.Second,
		FrameLogger:      zaplog.Frame,
	}
	return cc
}
