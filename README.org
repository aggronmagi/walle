#+startup: content
#+title: walle

walle目标灵活配置. 高性能的服务框架.开发中...
#+begin_quote
开发阶段，API并不稳定
#+end_quote

* 开发依赖工具
#+begin_src shell
go install github.com/aggronmagi/gogen@latest
go install github.com/golang/mock/mockgen@v1.6.0
#+end_src
* 进度
** DONE 网络层支持以下接口
CLOSED: [2021-11-16 二 21:59]
 - [X] gotcp
 - [X] gnet
 - [X] kcp
 - [X] websocket
** TODO 分布式
 - [X] kvstore（参考libkv接口）
 - [X] 服务注册发现
 - [ ] ClientProxy
** TODO 事件监听
 - [ ] 服务事件
 - [ ] 网络层事件
** TODO 工具代码包
 - [ ] gpool
 - [ ] skeleton
** TODO 代码生成
 - [ ] excel配置相关
 - [ ] rpc、tcp代码
 - [ ] redis/mysql 代码
* 网络层
[[./doc/network.org][网络层详细文档]]

网络层:
 1. 底层接口. io层，只提供系统层级交互. read/write
 2. 中层接口. process层，定制处理流程. 已完成
 3. 高层接口. 业务逻辑层.
    手写代码,后续会分为2层. 
    1. 生成代码层
    2. 自定义逻辑层
[[./doc/img/network.png]]

Process层:
[[./doc/img/process.png]]

* 源码目录
#+begin_example
.
├── app              - 应用程序封装。确保启动顺序与正确退出
├── example          - 代码示例
├── internal
│   └── util
│       └── test     - 用于测试函数调用顺序，调用参数等。
├── net
│   ├── iface        - 网络接口定义
│   ├── packet       - 网络底层包定义
│   ├── process      - process层处理封装
│   ├── discovery    - 服务注册发现
│   ├── clientproxy  - 客户端代理实现。
│   ├── gnet         - gnet封装
│   ├── gotcp        - net/tcp 包封装
│   ├── kcp          - kcp 封装（实际只是gotcp包参数封装）
│   └── ws           - websocket封装 
├── util             - 辅助工具代码
│   └── rtimer       - tars timewheel 代码
├── kvstore          - kv接口封装
│   └── etcd         - etcd kv接口封装
└── zaplog           - 日志封装
#+end_example
